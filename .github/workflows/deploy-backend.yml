name: Deploy backend

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "src/greektax/**"
      - "requirements.txt"
      - "requirements-dev.txt"
      - "pyproject.toml"
      - "scripts/**"

concurrency:
  group: deploy-backend
  cancel-in-progress: false

jobs:
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
      PYTHONANYWHERE_VENV: ${{ secrets.PYTHONANYWHERE_VENV }}
      PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
      PYTHONANYWHERE_WEBAPP: ${{ secrets.PYTHONANYWHERE_WEBAPP }}
      PYTHONANYWHERE_APP_DIR: /home/${{ secrets.PYTHONANYWHERE_USERNAME }}/greektax
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Run pytest
        run: pytest
      - name: Run ruff
        run: ruff check src tests
      - name: Run mypy
        run: mypy src
      - name: Validate YAML configs
        run: python -m greektax.backend.config.validator
      - name: Validate deployment secrets
        env:
          PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          PYTHONANYWHERE_VENV: ${{ secrets.PYTHONANYWHERE_VENV }}
          PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
          PYTHONANYWHERE_WEBAPP: ${{ secrets.PYTHONANYWHERE_WEBAPP }}
          PYTHONANYWHERE_SSH_KEY: ${{ secrets.PYTHONANYWHERE_SSH_KEY }}
        run: |
          set -euo pipefail

          missing=0
          for var in \
            PYTHONANYWHERE_USERNAME \
            PYTHONANYWHERE_VENV \
            PYTHONANYWHERE_API_TOKEN \
            PYTHONANYWHERE_WEBAPP \
            PYTHONANYWHERE_SSH_KEY
          do
            if [ -z "${!var}" ]; then
              echo "::error::${var} is empty; update the repository secret before deploying."
              missing=1
            fi
          done

          if [ "${missing}" -ne 0 ]; then
            exit 1
          fi

          temp_key="$(mktemp)"
          trap 'rm -f "${temp_key}"' EXIT
          printf '%s\n' "${PYTHONANYWHERE_SSH_KEY}" | tr -d '\r' > "${temp_key}"
          chmod 600 "${temp_key}"

          if ! ssh-keygen -lf "${temp_key}" >/dev/null 2>&1; then
            echo "::error::PYTHONANYWHERE_SSH_KEY is not a valid SSH private key."
            exit 1
          fi
      - name: Prepare SSH key
        id: prepare-key
        env:
          PYTHONANYWHERE_SSH_KEY: ${{ secrets.PYTHONANYWHERE_SSH_KEY }}
        run: |
          ssh_dir="${HOME}/.ssh"
          key_file="${ssh_dir}/authorized_keys"
          mkdir -p "${ssh_dir}"
          chmod 700 "${ssh_dir}"
          printf '%s\n' "${PYTHONANYWHERE_SSH_KEY}" | tr -d '\r' > "${key_file}"
          chmod 600 "${key_file}"
          echo "key_path=${key_file}" >> "${GITHUB_OUTPUT}"
      - name: Push code to PythonAnywhere
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ssh.pythonanywhere.com
          username: ${{ env.PYTHONANYWHERE_USERNAME }}
          key_path: ${{ steps.prepare-key.outputs.key_path }}
          script: |
            set -euo pipefail
            cd "${PYTHONANYWHERE_APP_DIR}"
            git fetch --prune
            git reset --hard origin/main
            source "${PYTHONANYWHERE_VENV}/bin/activate"
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install .
      - name: Reload web app
        run: |
          curl -fsS -X POST \
            -H "Authorization: Token ${PYTHONANYWHERE_API_TOKEN}" \
            https://www.pythonanywhere.com/api/v0/user/${PYTHONANYWHERE_USERNAME}/webapps/${PYTHONANYWHERE_WEBAPP}/reload/
