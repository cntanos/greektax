#!/usr/bin/env python3
"""Embed shared translation catalogues into the frontend assets."""

from __future__ import annotations

import json
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parents[1]
TRANSLATIONS_DIR = REPO_ROOT / "src" / "greektax" / "translations"
OUTPUT_PATH = (
    REPO_ROOT / "src" / "frontend" / "assets" / "scripts" / "translations.generated.js"
)

HEADER = """// This file is auto-generated by scripts/embed_translations.py.\n"""
FOOTER = """\nif (typeof window !== "undefined") {\n  window.__GREEKTAX_EMBEDDED_TRANSLATIONS__ = translations;\n} else if (typeof globalThis !== "undefined") {\n  globalThis.__GREEKTAX_EMBEDDED_TRANSLATIONS__ = translations;\n}\n"""


def main() -> None:
    locales: dict[str, dict] = {}

    if not TRANSLATIONS_DIR.is_dir():
        raise SystemExit(f"Missing translations directory: {TRANSLATIONS_DIR}")

    for path in sorted(TRANSLATIONS_DIR.glob("*.json")):
        with path.open("r", encoding="utf-8") as handle:
            payload = json.load(handle)

        frontend = payload.get("frontend") if isinstance(payload, dict) else None
        if not isinstance(frontend, dict):
            frontend = {}

        locales[path.stem] = frontend

    # Normalise locale keys to just the stem (already done) and ensure stable output order.
    ordered_locales = {key: locales[key] for key in sorted(locales)}
    json_payload = json.dumps(ordered_locales, ensure_ascii=False, indent=2, sort_keys=True)

    content_lines = [
        HEADER,
        "(function () {",
        "  const translations = %s;" % json_payload.replace("\n", "\n  "),
        FOOTER,
        "})();",
        "",
    ]

    OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    OUTPUT_PATH.write_text("\n".join(content_lines), encoding="utf-8")


if __name__ == "__main__":
    main()
